# Configuration file

general {
    # The basic scan radius without range modules.
    # IMPORTANT: some modules such as the block and ore scanner modules will already use
    # a reduced radius based on this value. Specifically, the ore scanners multiply this
    # value by 0.25, and the block scanner multiplies it by 0.5.
    # Range modules will boost the range by half this value.
    # Min: 16
    # Max: 128
    I:baseScanRadius=96

    # Registry names of blocks that will never be scanned.
    S:blockBlacklist <
        minecraft:command_block
     >

    # Amount of energy that can be stored in a scanner.
    # Min: 0
    # Max: 2147483647
    I:energyCapacityScanner=25000

    # Amount of energy used by the animal module per scan.
    # Min: 0
    # Max: 2147483647
    I:energyCostModuleAnimal=100

    # Amount of energy used by the block module per scan.
    # Min: 0
    # Max: 2147483647
    I:energyCostModuleBlock=150

    # Amount of energy used by the entity module per scan.
    # Min: 0
    # Max: 2147483647
    I:energyCostModuleEntity=200

    # Amount of energy used by the fluid module per scan.
    # Min: 0
    # Max: 2147483647
    I:energyCostModuleFluid=250

    # Amount of energy used by the monster module per scan.
    # Min: 0
    # Max: 2147483647
    I:energyCostModuleMonster=150

    # Amount of energy used by the common ore module per scan.
    # Min: 0
    # Max: 2147483647
    I:energyCostModuleOreCommon=500

    # Amount of energy used by the rare ore module per scan.
    # Min: 0
    # Max: 2147483647
    I:energyCostModuleOreRare=1000

    # Amount of energy used by the range module per scan.
    # Min: 0
    # Max: 2147483647
    I:energyCostModuleRange=100

    # Amount of energy used by the structure module per scan.
    # Min: 0
    # Max: 2147483647
    I:energyCostModuleStructure=150

    # Fluid names of fluids that should be ignored.
    S:fluidBlacklist <
     >

    # The colors for fluids used when rendering their result bounding box.
    # See `oreColors` for format entries have to be in.
    S:fluidColors <
        water=0x4275DC
        lava=0xE26723
     >

    # Whether to try to inject a depth texture into Minecraft's FBO when rendering the
    # scan wave effect. This is much faster as it will not have to re-render the world
    # geometry to retrieve the depth information required for the effect. However, it
    # appears that on some systems this doesn't work. The mod tries to detect that and
    # will fall back to re-rendering automatically, but you can force re-rendering by
    # setting this to false, e.g. for debugging or just to avoid the one logged warning.
    B:injectDepthTexture=true

    # Whether to log out failure to determine the item stack dropped by a block.
    # Scannable needs to find the item stack representation of a block to get the
    # ore dictionary name(s) of blocks, as well as to show a more accurate tooltip
    # of the currently bound block in the block module. Scannable attempts to find
    # the item stack representation by calling Block.getPickBlock (which is allowed
    # to fail, as some blocks require a valid world state) and alternatively by using
    #  Item.getItemFromBlock+Block.damageDropped, the latter being verified using the
    # roundtrip through Block.damageDropped/Item.getMetadata/Block.getStateFromMeta.
    # Sadly this fails for a lot of modded blocks because people rarely implement
    # Block.damageDropped. As a workaround you can add blocks for which this fails to
    # the `statesCommon` and `statesRare` lists.
    B:logBlockDropLookupFailures=false

    # Ore dictionary entries that match the common ore pattern but should be ignored.
    S:oreBlacklist <
     >

    # The colors for ores used when rendering their result bounding box.
    # Each entry must be a key-value pair separated by a `=`, with the.
    # key being the ore dictionary name and the value being the hexadecimal
    # RGB value of the color.
    S:oreColors <
        oreCoal=0x433E3B
        oreIron=0xA17951
        oreGold=0xF4F71F
        oreLapis=0x4863F0
        oreDiamond=0x48E2F0
        oreRedstone=0xE61E1E
        oreEmerald=0x12BA16
        oreQuartz=0xB3D9D2
        glowstone=0xE9E68E
        oreCopper=0xE4A020
        oreLead=0x8187C3
        oreMithril=0x97D5FE
        oreNickel=0xD0D3AC
        orePlatinum=0x7AC0FD
        oreSilver=0xE8F2FB
        oreTin=0xCCE4FE
        oreAluminum=0xCBE4E2
        oreAluminium=0xCBE4E2
        orePlutonium=0x9DE054
        oreUranium=0x9DE054
        oreYellorium=0xD8E054
        oreArdite=0xB77E11
        oreCobalt=0x413BB8
        oreCinnabar=0xF5DA25
        oreCrystalAir=0xF7E677
        oreCrystalFire=0xDC7248
        oreCrystalWater=0x9595D5
        oreCrystalEarth=0x49B45A
        oreCrystalOrder=0x9FF2DE
        oreCrystalEntropy=0x545476
     >

    # Ore dictionary entries considered common ores, requiring the common ore scanner module.
    # Use this to mark ores as common, as opposed to rare (see oresRare).
    S:oresCommon <
        oreCoal
        oreIron
        oreRedstone
        glowstone
        oreCopper
        oreTin
        oreLead
        oreAluminum
        oreAluminium
        oreCinnabar
        oreLapis
        oreQuartz
        oreApatite
        oreQuartzBlack
        oreCertusQuartz
        oreOsmium
        oreNickel
        oreFluidCrudeOilSand
        oreFluidCrudeOilShale
     >

    # Ore dictionary names of ores considered 'rare', requiring the rare ore scanner module.
    # Anything matching /ore[A-Z].*/ that isn't in the common ore list is
    # automatically considered a rare ore (as opposed to the other way around,
    # to make missing entries less likely be a problem). Use this to add rare
    # ores that do follow this pattern.
    S:oresRare <
     >

    # Block states considered common ores, requiring the common ore scanner module.
    # Use this to mark arbitrary block states as common ores. Format is as follows:
    #   mod_id:block_name
    # or with block properties:
    #   mod_id:block_name[property1=value1,property2=value2]
    # You can look up the properties (as well as name and mod id) in the F3 debug overlay
    # in the bottom right.
    S:statesCommon <
     >

    # Block states considered rare ores, requiring the rare ore scanner module.
    # Use this to mark arbitrary block states as rare ores. Format is as follows:
    #   mod_id:block_name
    # or with block properties:
    #   mod_id:block_name[property1=value1,property2=value2]
    # You can look up the properties (as well as name and mod id) in the F3 debug overlay
    # in the bottom right.
    S:statesRare <
     >

    # The list of structures the structure module scans for.
    S:structures <
        EndCity
        Fortress
        Mansion
        Mineshaft
        Monument
        Stronghold
        Temple
        Village
     >

    # Whether to consume energy when performing a scan.
    # Will make the scanner a chargeable item.
    B:useEnergy=true
}


