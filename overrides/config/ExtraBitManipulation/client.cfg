# Configuration file

"bit addition bounding box" {
    # Sets the alpha value of the portion of the box that is behind other textures. (default = 28) [range: 0 ~ 255, default: 28]
    I:"Alpha Inner Box"=28

    # Sets the alpha value of the portion of the box that is in front of other textures. (default = 115) [range: 0 ~ 255, default: 115]
    I:"Alpha Outer Box"=115

    # Sets the blue value of the box. (default = 0) [range: 0 ~ 255, default: 0]
    I:"Color - Blue"=0

    # Sets the green value of the box. (default = 0) [range: 0 ~ 255, default: 0]
    I:"Color - Green"=0

    # Sets the red value of the box. (default = 0) [range: 0 ~ 255, default: 0]
    I:"Color - Red"=0

    # Sets the line width of the box. (default = 2.0) [range: 0.0 ~ 3.4028235E38, default: 2.0]
    S:"Line Width"=2.0

    # Causes the portion of the box that is behind other textures to be rendered. (default = false) [default: false]
    B:"Render Inner Box"=false

    # Causes the portion of the box that is in front of other textures to be rendered. (default = true) [default: true]
    B:"Render Outer Box"=true
}


"bit addition enveloped shape" {
    # Sets the alpha value of the portion of the shape that is behind other textures. (default = 115) [range: 0 ~ 255, default: 115]
    I:"Alpha Inner Shape"=115

    # Sets the alpha value of the portion of the shape that is in front of other textures. (default = 38) [range: 0 ~ 255, default: 38]
    I:"Alpha Outer Shape"=38

    # Sets the blue value of the shape. (default = 255) [range: 0 ~ 255, default: 255]
    I:"Color - Blue"=255

    # Sets the green value of the shape. (default = 0) [range: 0 ~ 255, default: 0]
    I:"Color - Green"=0

    # Sets the red value of the shape. (default = 0) [range: 0 ~ 255, default: 0]
    I:"Color - Red"=0

    # Sets the line width of the shape. (default = 2.0) [range: 0.0 ~ 3.4028235E38, default: 2.0]
    S:"Line Width"=2.0

    # Causes the portion of the shape that is behind other textures to be rendered. (default = false) [default: false]
    B:"Render Inner Shape"=false

    # Causes the portion of the shape that is in front of other textures to be rendered. (default = true) [default: true]
    B:"Render Outer Shape"=true
}


"bit removal bounding box" {
    # Sets the alpha value of the portion of the box that is behind other textures. (default = 28) [range: 0 ~ 255, default: 28]
    I:"Alpha Inner Box"=28

    # Sets the alpha value of the portion of the box that is in front of other textures. (default = 115) [range: 0 ~ 255, default: 115]
    I:"Alpha Outer Box"=115

    # Sets the blue value of the box. (default = 0) [range: 0 ~ 255, default: 0]
    I:"Color - Blue"=0

    # Sets the green value of the box. (default = 0) [range: 0 ~ 255, default: 0]
    I:"Color - Green"=0

    # Sets the red value of the box. (default = 0) [range: 0 ~ 255, default: 0]
    I:"Color - Red"=0

    # Sets the line width of the box. (default = 2.0) [range: 0.0 ~ 3.4028235E38, default: 2.0]
    S:"Line Width"=2.0

    # Causes the portion of the box that is behind other textures to be rendered. (default = true) [default: true]
    B:"Render Inner Box"=true

    # Causes the portion of the box that is in front of other textures to be rendered. (default = true) [default: true]
    B:"Render Outer Box"=true
}


"bit removal enveloped shape" {
    # Sets the alpha value of the portion of the shape that is behind other textures. (default = 115) [range: 0 ~ 255, default: 115]
    I:"Alpha Inner Shape"=115

    # Sets the alpha value of the portion of the shape that is in front of other textures. (default = 38) [range: 0 ~ 255, default: 38]
    I:"Alpha Outer Shape"=38

    # Sets the blue value of the shape. (default = 255) [range: 0 ~ 255, default: 255]
    I:"Color - Blue"=255

    # Sets the green value of the shape. (default = 0) [range: 0 ~ 255, default: 0]
    I:"Color - Green"=0

    # Sets the red value of the shape. (default = 0) [range: 0 ~ 255, default: 0]
    I:"Color - Red"=0

    # Sets the line width of the shape. (default = 2.0) [range: 0.0 ~ 3.4028235E38, default: 2.0]
    S:"Line Width"=2.0

    # Causes the portion of the shape that is behind other textures to be rendered. (default = true) [default: true]
    B:"Render Inner Shape"=true

    # Causes the portion of the shape that is in front of other textures to be rendered. (default = false) [default: false]
    B:"Render Outer Shape"=false
}


"bit wrench overlays" {
    # Distance over which the arrowhead overlay used in block/texture translation/rotation will fade in (as well as out) as it moves. If this is set to the minimum value of 0, no fading will occur. (default = 0.3 meters) [range: 0.0 ~ 1.7976931348623157E308, default: 0.3]
    S:"Arrow Fade Distance"=0.3

    # Total travel distance of the arrowhead overlay used in block/texture translation/rotation as measured from the center of the block face the player is looking at. If this is set to the minimum value of 0, only one arrow head will be rendered and no movement will occur. (default = 0.75 meters) [range: 0.0 ~ 1.7976931348623157E308, default: 0.75]
    S:"Arrow Movement Distance"=0.75

    # Number of milliseconds over which the arrowhead overlay used in block/texture translation/rotation will travel from one end to the other of the distance specified by 'Arrow Movement Distance'. (default = 2 seconds) [range: 1 ~ 2147483647, default: 2000]
    I:"Arrow Movement Period"=2000

    # Distance between the three moving arrowhead overlays used in block/texture translation/rotation. If this is set to the minimum value of 0, only one arrow head will be rendered. (default = 1/3 of the default distance of 0.75 meters, i.e. evenly spaced) [range: 0.0 ~ 1.7976931348623157E308, default: 0.25]
    S:"Arrow Spacing"=0.25

    # Prevents overlays from rendering. (default = enabled) [default: false]
    B:"Disable Overlay Rendering"=false

    # Half the total travel distance of the bidirectional arrow overlay used in block/texture mirroring as measured from the center of the block face the player is looking at. If this is set to the minimum value of 0, no oscillation will occur. (default = 0.1 meters) [range: 0.0 ~ 1.7976931348623157E308, default: 0.1]
    S:"Mirror Oscillation Amplitude"=0.1

    # Number of milliseconds over which the bidirectional arrow overlay used in block/texture mirroring will complete one oscillation. (default = 0.83 seconds) [range: 1 ~ 2147483647, default: 830]
    I:"Mirror Oscillation Period"=830

    # Number of milliseconds over which the cyclic arrow overlay used in block/texture rotation will complete one rotation. (default = 3 seconds) [range: 1 ~ 2147483647, default: 3000]
    I:"Rotation Period"=3000

    # Number of milliseconds over which the circle overlay used in block translation will complete one cycle of scaling from a point to full-sized or vice versa. (default = 1.3 seconds) [range: 1 ~ 2147483647, default: 1300]
    I:"Translation Scale Period"=1300
}


"chiseled armor settings" {
    # If set to true, pressing E or Escape will switch back to the main inventory GUI. If set to false, doing so will simply close the GUI. [default: false]
    B:"Exit To Main Inventory From Slots GUI"=false

    # Specifies when to render the default Chiseled Armor model for a given armor piece. If set to 'If Empty', it will only render for an armor piece if there are no non-empty itemstacks in the itemstack lists of any of its moving parts. It will never/always render, if set to 'Never'/'Always', respectively. [default: If Empty]
    S:"Render Default Armor Model"=If Empty

    # Specifies when to render the Chiseled Armor itemstacks as they render when worn, rather than the default model. The specified model will either will always render, or will only render if the player is holding shift. [default: Default Model If Holding Shift]
    S:"Rendered Armor Stack Models"=Default Model If Holding Shift

    # Specifies when to show the button in the vanilla survival inventory that allows switching between it and the Chiseled Armor slots inventory. It will either be shown when in possession of any items, only Extra Bit Manipulation items, only EBM or Chisels & Bits items, only Chiseled Armor items, or will always/never be shown. [default: EBM Or C&B Items]
    S:"Show Armor Slots Inventory Button"=EBM Or C&B Items

    # A scale of this many pixels will be applied to all items rendered for all moving parts of all Chiseled Armor pieces, so as to prevent z-fighting of those items with the player model. [range: 0.0 ~ 3.4028235E38, default: 0.05]
    S:"Z-Fighting Buffer Scale - Global"=0.05

    # A scale of this many pixels will be additionally applied to all items rendered for the right leg and foot moving parts of Chiseled Armor boots, so as to prevent z-fighting of those items with the items of the left leg and foot moving parts. [range: 0.0 ~ 3.4028235E38, default: 0.05]
    S:"Z-Fighting Buffer Scale - Leg & Foot"=0.05

    # The items of both feet will be translated down by this many pixels to prevent z-fighting with the items of both legs. [range: 0.0 ~ 3.4028235E38, default: 0.05]
    S:"Z-Fighting Buffer Translation - Feet"=0.05
}


"default values chiseled armor" {
    # Players and bit tools will initialize with this moving part (specifies a moving part of this armor piece to import blocks into in collection mode). (default = Right Foot) [default: Right Foot]
    S:"Boots Moving Part"=Right Foot

    # Players and bit tools will initialize with this moving part (specifies a moving part of this armor piece to import blocks into in collection mode). (default = Torso) [default: Torso]
    S:"Chestplate Moving Part"=Torso

    # Players and bit tools will initialize with this moving part (specifies a moving part of this armor piece to import blocks into in collection mode). (default = Head) [default: Head]
    S:"Helmet Moving Part"=Head

    # Players and bit tools will initialize with this moving part (specifies a moving part of this armor piece to import blocks into in collection mode). (default = Pelvis) [default: Pelvis]
    S:"Leggings Moving Part"=Pelvis

    # Players and bit tools will initialize with this mode (either template creation mode to set the reference area of the moving part the blocks will be rendered relative to (and to optionally fill that area with bits), or block collection mode to import blocks into a moving part of the armor piece). (default = Template Creation) [default: Template Creation]
    S:Mode=Template Creation

    # Players and bit tools will initialize with this scale (which sets the scale of the bodypart templates, and of the block copies imported into the armor piece from the world). (default = 1:1) [default: 1:1]
    S:Scale=1:1

    # Players and bit tools will initialize with this targeting mode (if true, when importing blocks into the armor piece in collection mode, the drawn collection area will be determined by the bit click and the bit released on. If false, it will be determined by the block click and block released on). (default = false) [default: false]
    B:"Target Bits"=false
}


"default values modeling tool" {
    # Players and bit tools will initialize with this area mode (the area is either drawn (drawn), centered on the nearest block grid vertex (centered), or the area faces away from the player with one of the corners of the area at the nearest block grid vertex (corner)). (default = Centered) [default: Centered]
    S:"Area Mode"=Centered

    # Players and bit tools will initialize with this chunk-snap mode (either the area does not snap at all (off), it snaps in the X and Z axes (Y axis is unaffected) to whichever chunk the block the player is looking at is in (snap-to-chunk XZ), or it additionally snaps in the Y axis to the 'vertical chunk' (as visualized by pressing F3 + G) the block the player is looking at is in (snap-to-chunk XYZ)). (default = Snap-to-Chunk XYZ) [default: Snap-to-Chunk XYZ]
    S:"Chunk-Snap Mode"=Snap-to-Chunk XYZ

    # Players and bit tools will initialize with this whether the modeling tool GUI opens upon reading block states (if true, upon reading an area of block states in the world, the GUI that allows the player to preview the model and to manually map bits to block states will open. If set to false, it will not do so. Regardless of this setting, the GUI can be opened by right-clicking while sneaking). (default = true) [default: true]
    B:"Open Gui Upon Read"=true
}


"default values sculpting tool" {
    # Players and bit tools will initialize with this addition bit type (sets the block form [as specified by 'modID:name'] of the bit type that sculpting spades add to the world (an empty string, an unsupported block, or any misspelling will specify no bit type - the type will have to be set before the spade can be used)). (default = None) [default: minecraft:air]
    S:"Bit Type - Addition (spade)"=minecraft:air

    # Players and bit tools will initialize with this filtered bit type (sculpting can remove only one bit type rather than any - this config sets the block [as specified by 'modID:name'] of the bit type that sculpting wires remove (an empty string, an unsupported block, or any misspelling will specify any/all bit types)). (default = Any) [default: minecraft:air]
    S:"Bit Type - Filter (wire)"=minecraft:air

    # Players and bit tools will initialize with this direction. (default = Up) [default: Up]
    S:Direction=Up

    # Players and bit tools will initialize with this sculpting spade hollow property value (shape is either hollow or solid). (default = false) [default: false]
    B:"Hollow Shapes (spade)"=false

    # Players and bit tools will initialize with this sculpting wire hollow property value (shape is either hollow or solid). (default = false) [default: false]
    B:"Hollow Shapes (wire)"=false

    # Players and bit tools will initialize with this shape placement property value (shapes added with spades can be centered around the bit clicked, of offset opposite the side clicked). (default = true) [default: true]
    B:"Offset Shape for Placement"=true

    # Players and bit tools will initialize with this hollow sculpting shape open-ended property value (hollow shapes, such as cylinders, pyramids, etc., can have open or closed ends). (default = false) [default: false]
    B:"Open Ends"=false

    # Players and bit tools will initialize with this sculpting mode (local mode affects only the block clicked - global/drawn modes affects any bits from any blocks that intersect the sculpting shape when a block is clicked (global) or when the mouse is released after a click and drag (drawn)). (default = Local) [default: Local]
    S:"Sculpting Mode"=Local

    # Players and bit tools will initialize with this sculpting shape semi-diameter (in bits). (default = 5 bits) [range: 0 ~ 2147483647, default: 5]
    I:Semi-Diameter=5

    # Players and bit tools will initialize with this sculpting shape. (default = Sphere) [default: Sphere]
    S:"Shape (curved)"=Sphere

    # Players and bit tools will initialize with this sculpting shape. (default = Cube) [default: Cube]
    S:"Shape (flat/straight)"=Cube

    # Players and bit tools will initialize with this targeting mode (when sculpting in local/global mode either bits are targeted [the shape is centered on the center of the bit looked - the diameter is one (the center bit) plus/minus x number of bits (semi-diameter is x + 1/2 bit)], or vertices of the bit grid are targeted [the shape is centered on the corner (the one closest to the cursor) of the bit looked at (i.e. centered on a vertex of the grid) - the diameter is 2x number of bits (x is a true semi-diameter)]). (default = false) [default: false]
    B:"Target Bit Grid Vertexes"=false

    # Players and bit tools will initialize with this hollow sculpting shape wall thickness (in bits). (default = 2 bits) [range: 1 ~ 2147483647, default: 2]
    I:"Wall Thickness"=2
}


"display in chat chiseled armor" {
    # If set to true, whenever moving part is changed, a message will be added to chat indicating the change. This will not fill chat with messages, since any pre-existing messages from this mod will be deleted before adding the next.See 'Default Value' config for a description of moving part. (default = true) [default: true]
    B:"Boots Moving Part"=true

    # If set to true, whenever moving part is changed, a message will be added to chat indicating the change. This will not fill chat with messages, since any pre-existing messages from this mod will be deleted before adding the next.See 'Default Value' config for a description of moving part. (default = true) [default: true]
    B:"Chestplate Moving Part"=true

    # If set to true, whenever moving part is changed, a message will be added to chat indicating the change. This will not fill chat with messages, since any pre-existing messages from this mod will be deleted before adding the next.See 'Default Value' config for a description of moving part. (default = true) [default: true]
    B:"Helmet Moving Part"=true

    # If set to true, whenever moving part is changed, a message will be added to chat indicating the change. This will not fill chat with messages, since any pre-existing messages from this mod will be deleted before adding the next.See 'Default Value' config for a description of moving part. (default = true) [default: true]
    B:"Leggings Moving Part"=true

    # If set to true, whenever mode is changed, a message will be added to chat indicating the change. This will not fill chat with messages, since any pre-existing messages from this mod will be deleted before adding the next.See 'Default Value' config for a description of mode. (default = true) [default: true]
    B:Mode=true

    # If set to true, whenever scale is changed, a message will be added to chat indicating the change. This will not fill chat with messages, since any pre-existing messages from this mod will be deleted before adding the next.See 'Default Value' config for a description of scale. (default = true) [default: true]
    B:Scale=true

    # If set to true, whenever targeting mode is changed, a message will be added to chat indicating the change. This will not fill chat with messages, since any pre-existing messages from this mod will be deleted before adding the next.See 'Default Value' config for a description of targeting mode. (default = true) [default: true]
    B:"Target Bits"=true
}


"display in chat modeling tool" {
    # If set to true, whenever area mode is changed, a message will be added to chat indicating the change. This will not fill chat with messages, since any pre-existing messages from this mod will be deleted before adding the next.See 'Default Value' config for a description of area mode. (default = true) [default: true]
    B:"Area Mode"=true

    # If set to true, whenever chunk-snap mode is changed, a message will be added to chat indicating the change. This will not fill chat with messages, since any pre-existing messages from this mod will be deleted before adding the next.See 'Default Value' config for a description of chunk-snap mode. (default = true) [default: true]
    B:"Chunk-Snap Mode"=true

    # If set to true, whenever whether the modeling tool GUI opens upon reading block states is changed, a message will be added to chat indicating the change. This will not fill chat with messages, since any pre-existing messages from this mod will be deleted before adding the next.See 'Default Value' config for a description of whether the modeling tool GUI opens upon reading block states. (default = true) [default: true]
    B:"Open Gui Upon Read"=true
}


"display in chat sculpting tool" {
    # If set to true, whenever addition bit type is changed, a message will be added to chat indicating the change. This will not fill chat with messages, since any pre-existing messages from this mod will be deleted before adding the next.See 'Default Value' config for a description of addition bit type. (default = true) [default: true]
    B:"Bit Type - Addition (spade)"=true

    # If set to true, whenever filtered bit type is changed, a message will be added to chat indicating the change. This will not fill chat with messages, since any pre-existing messages from this mod will be deleted before adding the next.See 'Default Value' config for a description of filtered bit type. (default = true) [default: true]
    B:"Bit Type - Filter (wire)"=true

    # If set to true, whenever sculpting shape direction is changed, a message will be added to chat indicating the change. This will not fill chat with messages, since any pre-existing messages from this mod will be deleted before adding the next.See 'Default Value' config for a description of sculpting shape direction. (default = true) [default: true]
    B:Direction=true

    # If set to true, whenever sculpting shape hollowness of sculpting spades is changed, a message will be added to chat indicating the change. This will not fill chat with messages, since any pre-existing messages from this mod will be deleted before adding the next.See 'Default Value' config for a description of sculpting shape hollowness of sculpting spades. (default = true) [default: true]
    B:"Hollow Shapes (spade)"=true

    # If set to true, whenever sculpting shape hollowness of sculpting wires is changed, a message will be added to chat indicating the change. This will not fill chat with messages, since any pre-existing messages from this mod will be deleted before adding the next.See 'Default Value' config for a description of sculpting shape hollowness of sculpting wires. (default = true) [default: true]
    B:"Hollow Shapes (wire)"=true

    # If set to true, whenever whether or not sculpting shapes added with spades will be offset for placement is changed, a message will be added to chat indicating the change. This will not fill chat with messages, since any pre-existing messages from this mod will be deleted before adding the next.See 'Default Value' config for a description of whether or not sculpting shapes added with spades will be offset for placement. (default = true) [default: true]
    B:"Offset Shape for Placement"=true

    # If set to true, whenever hollow sculpting shape open-endedness is changed, a message will be added to chat indicating the change. This will not fill chat with messages, since any pre-existing messages from this mod will be deleted before adding the next.See 'Default Value' config for a description of hollow sculpting shape open-endedness. (default = true) [default: true]
    B:"Open Ends"=true

    # If set to true, whenever sculpting mode is changed, a message will be added to chat indicating the change. This will not fill chat with messages, since any pre-existing messages from this mod will be deleted before adding the next.See 'Default Value' config for a description of sculpting mode. (default = true) [default: true]
    B:"Sculpting Mode"=true

    # If set to true, whenever sculpting shape semi-diameter is changed, a message will be added to chat indicating the change. This will not fill chat with messages, since any pre-existing messages from this mod will be deleted before adding the next.See 'Default Value' config for a description of sculpting shape semi-diameter. (default = true) [default: true]
    B:Semi-Diameter=true

    # If set to true, whenever curved tool sculpting shape is changed, a message will be added to chat indicating the change. This will not fill chat with messages, since any pre-existing messages from this mod will be deleted before adding the next.See 'Default Value' config for a description of curved tool sculpting shape. (default = true) [default: true]
    B:"Shape (curved)"=true

    # If set to true, whenever flat/straight tool sculpting shape is changed, a message will be added to chat indicating the change. This will not fill chat with messages, since any pre-existing messages from this mod will be deleted before adding the next.See 'Default Value' config for a description of flat/straight tool sculpting shape. (default = true) [default: true]
    B:"Shape (flat/straight)"=true

    # If set to true, whenever targeting mode is changed, a message will be added to chat indicating the change. This will not fill chat with messages, since any pre-existing messages from this mod will be deleted before adding the next.See 'Default Value' config for a description of targeting mode. (default = true) [default: true]
    B:"Target Bit Grid Vertexes"=true

    # If set to true, whenever hollow sculpting shape wall thickness is changed, a message will be added to chat indicating the change. This will not fill chat with messages, since any pre-existing messages from this mod will be deleted before adding the next.See 'Default Value' config for a description of hollow sculpting shape wall thickness. (default = true) [default: true]
    B:"Wall Thickness"=true
}


"insufficient bits" {
    # If the player has insufficient bits in their inventory for a chiselable blockstate, an attempt will be made to find a replacement bit. First, if this is set to 'true', an attempt will be made to use the bit specified by the 'Default Replacement Bit' config. If this is set to 'false', this step will be skipped [default: true]
    B:"1st Check: Use Default Replacement Bit"=true

    # If the player has insufficient bits in their inventory for a chiselable blockstate, an attempt will be made to find a replacement bit. Second, if this is set to 'true', any/all bits in the player's inventory will be used, from the most numerous to the least numerous. If this is set to 'false', this step will be skipped [default: true]
    B:"2nd Check: Use Any Bit As Replacement"=true

    # If the player has insufficient bits in their inventory for a chiselable blockstate, an attempt will be made to find a replacement bit. Third, if this is set to 'true', air bits will be used, i.e. the bits will simply be left empty. If this is set to 'false', this step will be skipped [default: false]
    B:"3rd Check: Use Air As Replacement"=false

    # If the player has insufficient bits in their inventory for a chiselable blockstate, an attempt will be made to find a replacement bit. If the 'Use Default Replacement Bit' config is also set to 'true', then an attempt will first be made to use the bit version of this block as a replacement. [default: minecraft:redstone_block]
    S:"Default Replacement Bit"=minecraft:redstone_block
}


"modeling tool settings" {
    # If set to true, and if the 'per tool' box is checked in a given Modeling Tool (causing mappings to be read/written from/to the NBT tag of the itemstack), manually mapped blocks and block states will be saved to the itemstack's NBT as state IDs (integers - 4 bytes each). If set to false, they will be saved as a registry name (2 strings - 1 byte per char) and metadata (1 byte). Saving states as registry name for blocks and as registry name and metadata for block states takes up several times more space, and if thousands of mappings are manually stored in an item (as unlikely as that is), client or server crashing may occur if that item is sent through a packet network since the maximum payload is 32767 bytes. The benefit is that if the item is transported across worlds, the states will remain consistent. Saving states as integers, however, takes several times less space (meaning that 10k+ mappings would be necessary to cause a crash, which is even less likely), but the state IDs may not remain consistent if the item is transported across worlds. Changing this config will not cause any previously mapped states to be lost; all saved mappings will simply be read and saved in the new format the next time a state is manually mapped or unmapped. [default: false]
    B:"Save States By ID"=false
}


"per tool or per client chiseled armor" {
    # If set to true, moving part will be set/stored in each individual sculpting tool and apply only to that tool. If set to false, it will be stored in the client config file called 'modeling_data' and will apply to all tools. Regardless of this setting, the client and tools will still initialize with data, but this setting determines which is considered for use. See 'Default Value' config for a description of moving part. (default = true) [default: true]
    B:"Boots Moving Part"=true

    # If set to true, moving part will be set/stored in each individual sculpting tool and apply only to that tool. If set to false, it will be stored in the client config file called 'modeling_data' and will apply to all tools. Regardless of this setting, the client and tools will still initialize with data, but this setting determines which is considered for use. See 'Default Value' config for a description of moving part. (default = true) [default: true]
    B:"Chestplate Moving Part"=true

    # If set to true, moving part will be set/stored in each individual sculpting tool and apply only to that tool. If set to false, it will be stored in the client config file called 'modeling_data' and will apply to all tools. Regardless of this setting, the client and tools will still initialize with data, but this setting determines which is considered for use. See 'Default Value' config for a description of moving part. (default = true) [default: true]
    B:"Helmet Moving Part"=true

    # If set to true, moving part will be set/stored in each individual sculpting tool and apply only to that tool. If set to false, it will be stored in the client config file called 'modeling_data' and will apply to all tools. Regardless of this setting, the client and tools will still initialize with data, but this setting determines which is considered for use. See 'Default Value' config for a description of moving part. (default = true) [default: true]
    B:"Leggings Moving Part"=true

    # If set to true, mode will be set/stored in each individual sculpting tool and apply only to that tool. If set to false, it will be stored in the client config file called 'modeling_data' and will apply to all tools. Regardless of this setting, the client and tools will still initialize with data, but this setting determines which is considered for use. See 'Default Value' config for a description of mode. (default = true) [default: true]
    B:Mode=true

    # If set to true, scale will be set/stored in each individual sculpting tool and apply only to that tool. If set to false, it will be stored in the client config file called 'modeling_data' and will apply to all tools. Regardless of this setting, the client and tools will still initialize with data, but this setting determines which is considered for use. See 'Default Value' config for a description of scale. (default = false) [default: false]
    B:Scale=false

    # If set to true, targeting mode will be set/stored in each individual sculpting tool and apply only to that tool. If set to false, it will be stored in the client config file called 'modeling_data' and will apply to all tools. Regardless of this setting, the client and tools will still initialize with data, but this setting determines which is considered for use. See 'Default Value' config for a description of targeting mode. (default = false) [default: false]
    B:"Target Bits"=false
}


"per tool or per client modeling tool" {
    # If set to true, area mode will be set/stored in each individual sculpting tool and apply only to that tool. If set to false, it will be stored in the client config file called 'modeling_data' and will apply to all tools. Regardless of this setting, the client and tools will still initialize with data, but this setting determines which is considered for use. See 'Default Value' config for a description of area mode. (default = false) [default: false]
    B:"Area Mode"=false

    # If set to true, chunk-snap mode will be set/stored in each individual sculpting tool and apply only to that tool. If set to false, it will be stored in the client config file called 'modeling_data' and will apply to all tools. Regardless of this setting, the client and tools will still initialize with data, but this setting determines which is considered for use. See 'Default Value' config for a description of chunk-snap mode. (default = false) [default: false]
    B:"Chunk-Snap Mode"=false

    # If set to true, whether the modeling tool GUI opens upon reading block states will be set/stored in each individual sculpting tool and apply only to that tool. If set to false, it will be stored in the client config file called 'modeling_data' and will apply to all tools. Regardless of this setting, the client and tools will still initialize with data, but this setting determines which is considered for use. See 'Default Value' config for a description of whether the modeling tool GUI opens upon reading block states. (default = false) [default: false]
    B:"Open Gui Upon Read"=false
}


"per tool or per client sculpting tool" {
    # If set to true, addition bit type will be set/stored in each individual sculpting tool and apply only to that tool. If set to false, it will be stored in the client config file called 'modeling_data' and will apply to all tools. Regardless of this setting, the client and tools will still initialize with data, but this setting determines which is considered for use. See 'Default Value' config for a description of addition bit type. (default = true) [default: true]
    B:"Bit Type - Addition (spade)"=true

    # If set to true, filtered bit type will be set/stored in each individual sculpting tool and apply only to that tool. If set to false, it will be stored in the client config file called 'modeling_data' and will apply to all tools. Regardless of this setting, the client and tools will still initialize with data, but this setting determines which is considered for use. See 'Default Value' config for a description of filtered bit type. (default = true) [default: true]
    B:"Bit Type - Filter (wire)"=true

    # If set to true, sculpting shape direction will be set/stored in each individual sculpting tool and apply only to that tool. If set to false, it will be stored in the client config file called 'modeling_data' and will apply to all tools. Regardless of this setting, the client and tools will still initialize with data, but this setting determines which is considered for use. See 'Default Value' config for a description of sculpting shape direction. (default = false) [default: false]
    B:Direction=false

    # If set to true, sculpting shape hollowness of sculpting spades will be set/stored in each individual sculpting tool and apply only to that tool. If set to false, it will be stored in the client config file called 'modeling_data' and will apply to all tools. Regardless of this setting, the client and tools will still initialize with data, but this setting determines which is considered for use. See 'Default Value' config for a description of sculpting shape hollowness of sculpting spades. (default = false) [default: false]
    B:"Hollow Shapes (spade)"=false

    # If set to true, sculpting shape hollowness of sculpting wires will be set/stored in each individual sculpting tool and apply only to that tool. If set to false, it will be stored in the client config file called 'modeling_data' and will apply to all tools. Regardless of this setting, the client and tools will still initialize with data, but this setting determines which is considered for use. See 'Default Value' config for a description of sculpting shape hollowness of sculpting wires. (default = false) [default: false]
    B:"Hollow Shapes (wire)"=false

    # If set to true, whether or not sculpting shapes added with spades will be offset for placement will be set/stored in each individual sculpting tool and apply only to that tool. If set to false, it will be stored in the client config file called 'modeling_data' and will apply to all tools. Regardless of this setting, the client and tools will still initialize with data, but this setting determines which is considered for use. See 'Default Value' config for a description of whether or not sculpting shapes added with spades will be offset for placement. (default = false) [default: false]
    B:"Offset Shape for Placement"=false

    # If set to true, hollow sculpting shape open-endedness will be set/stored in each individual sculpting tool and apply only to that tool. If set to false, it will be stored in the client config file called 'modeling_data' and will apply to all tools. Regardless of this setting, the client and tools will still initialize with data, but this setting determines which is considered for use. See 'Default Value' config for a description of hollow sculpting shape open-endedness. (default = false) [default: false]
    B:"Open Ends"=false

    # If set to true, sculpting mode will be set/stored in each individual sculpting tool and apply only to that tool. If set to false, it will be stored in the client config file called 'modeling_data' and will apply to all tools. Regardless of this setting, the client and tools will still initialize with data, but this setting determines which is considered for use. See 'Default Value' config for a description of sculpting mode. (default = false) [default: false]
    B:"Sculpting Mode"=false

    # If set to true, sculpting shape semi-diameter will be set/stored in each individual sculpting tool and apply only to that tool. If set to false, it will be stored in the client config file called 'modeling_data' and will apply to all tools. Regardless of this setting, the client and tools will still initialize with data, but this setting determines which is considered for use. See 'Default Value' config for a description of sculpting shape semi-diameter. (default = true) [default: true]
    B:Semi-Diameter=true

    # If set to true, curved tool sculpting shape will be set/stored in each individual sculpting tool and apply only to that tool. If set to false, it will be stored in the client config file called 'modeling_data' and will apply to all tools. Regardless of this setting, the client and tools will still initialize with data, but this setting determines which is considered for use. See 'Default Value' config for a description of curved tool sculpting shape. (default = false) [default: false]
    B:"Shape (curved)"=false

    # If set to true, flat/straight tool sculpting shape will be set/stored in each individual sculpting tool and apply only to that tool. If set to false, it will be stored in the client config file called 'modeling_data' and will apply to all tools. Regardless of this setting, the client and tools will still initialize with data, but this setting determines which is considered for use. See 'Default Value' config for a description of flat/straight tool sculpting shape. (default = false) [default: false]
    B:"Shape (flat/straight)"=false

    # If set to true, targeting mode will be set/stored in each individual sculpting tool and apply only to that tool. If set to false, it will be stored in the client config file called 'modeling_data' and will apply to all tools. Regardless of this setting, the client and tools will still initialize with data, but this setting determines which is considered for use. See 'Default Value' config for a description of targeting mode. (default = false) [default: false]
    B:"Target Bit Grid Vertexes"=false

    # If set to true, hollow sculpting shape wall thickness will be set/stored in each individual sculpting tool and apply only to that tool. If set to false, it will be stored in the client config file called 'modeling_data' and will apply to all tools. Regardless of this setting, the client and tools will still initialize with data, but this setting determines which is considered for use. See 'Default Value' config for a description of hollow sculpting shape wall thickness. (default = false) [default: false]
    B:"Wall Thickness"=false
}


"sculpting & wrech settings" {
    # If set to true, sculpting tool display names will indicate the diameter of their bit removal/addition areas. If set to false, they will indicate the radius (default = true) [default: true]
    B:"Display Name Diameter"=true

    # If set to true, sculpting tool display names will indicate the size of their bit removal/addition areas in meters. If set to false, they will be in bits (default = false) [default: false]
    B:"Display Name Meter Units"=false

    # the maximum size (in bits) of sculpting shape semi-diameter (i.e. radius if it is a sphere). (default = 5 bits) [range: 1 ~ 2147483647, default: 32]
    I:"Max Semi-Diameter"=32

    # the maximum size (in bits) of hollow sculpting shapes. (default = 2 bits) [range: 1 ~ 2147483647, default: 32]
    I:"Max Wall Thickness"=32

    # If set to true, the Bit Wrench will only be able to invert blocks that are comprised of one bit type. If set to false, any block can be inverted and the bit type that empty bits will be filled with is whichever bit is the most prevalent in the block space. (default = false) [default: false]
    B:"One Bit Type Inversion Requirement"=false

    # Distance (in bits) to add to the semi-diameter of a sculpting tool's bit removal/addition area shape. If set to zero, no padding will be added; spheres, for example, will have single bits protruding from each cardinal direction at any size, since only those bits of those layers will be exactly on the sphere's perimeter. If set to 1, there will effectively be no padding for the same reason, but the radius will be one bit larger than specified. A value between 0 and 1 is suggested. (default = 0.2 bits) [range: 0.0 ~ 1.0, default: 0.2]
    S:"Semi-Diameter Padding"=0.2
}


"unchiselable block states" {
    # If an unchiselable blockstate is encountered, an attempt will be made to find a replacement bit. First, if this is set to 'true', an attempt will be made to use the bit specified by the 'Default Replacement Bit' config. If this is set to 'false', this step will be skipped [default: true]
    B:"1st Check: Use Default Replacement Bit"=true

    # If an unchiselable blockstate is encountered, an attempt will be made to find a replacement bit. Second, if this is set to 'true', any/all bits in the player's inventory will be used, from the most numerous to the least numerous. If this is set to 'false', this step will be skipped [default: true]
    B:"2nd Check: Use Any Bit As Replacement"=true

    # If an unchiselable blockstate is encountered, an attempt will be made to find a replacement bit. Third, if this is set to 'true', air bits will be used, i.e. the bits will simply be left empty. If this is set to 'false', this step will be skipped [default: false]
    B:"3rd Check: Use Air As Replacement"=false

    # If an unchiselable blockstate is encountered, an attempt will be made to find a replacement bit. If the 'Use Default Replacement Bit' config is also set to 'true', then an attempt will first be made to use the bit version of this block as a replacement. [default: minecraft:redstone_block]
    S:"Default Replacement Bit"=minecraft:redstone_block
}


